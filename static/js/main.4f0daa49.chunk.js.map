{"version":3,"sources":["components/TableCell.jsx","components/TableRow.jsx","components/Table.jsx","App.js","reportWebVitals.js","index.js"],"names":["TableCell","props","className","bgcolor","onMouseUp","this","mouseUp","onMouseDown","mouseDown","onMouseEnter","mouseEnter","onClick","Component","TableRow","cells","Table","state","rows","color","colored","cellCount","addColumn","bind","removeColumn","addRow","removeRow","createTable","colorOptions","fillAll","fillUncolored","id","clearAll","onChange","value","table","i","row","j","push","setState","event","preventDefault","target","style","backgroundColor","document","getElementsByTagName","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4f0daa49.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport '../App.css';\r\n\r\nexport default class TableCell extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <td className=\"cell\" bgcolor={\"gray\"}\r\n                onMouseUp = {this.props.mouseUp}\r\n                onMouseDown = {this.props.mouseDown}\r\n                onMouseEnter = {this.props.mouseEnter}\r\n                onClick = {this.props.onClick}\r\n            />\r\n        );\r\n    }\r\n}","import { Component } from \"react\";\r\nimport '../App.css';\r\n\r\nexport default class TableRow extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <tr className=\"row\"> {this.props.cells} </tr>\r\n        );\r\n    }\r\n}","import { Component } from \"react\";\r\nimport TableCell from \"./TableCell\";\r\nimport TableRow from \"./TableRow\";\r\nimport '../App.css';\r\n\r\nexport default class Table extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = ({\r\n            rows: 1,\r\n            color: \"\",\r\n            colored: false,\r\n            cellCount: 1\r\n        })\r\n\r\n        this.addColumn = this.addColumn.bind(this);\r\n        this.removeColumn = this.removeColumn.bind(this);\r\n        this.addRow = this.addRow.bind(this);\r\n        this.removeRow = this.removeRow.bind(this);\r\n        this.createTable = this.createTable.bind(this);\r\n        this.color = this.color.bind(this);\r\n        this.colorOptions = this.colorOptions.bind(this);\r\n        this.fillAll = this.fillAll.bind(this);\r\n        this.fillUncolored = this.fillUncolored.bind(this);\r\n        this.mouseUp = this.mouseUp.bind(this);\r\n        this.mouseDown = this.mouseDown.bind(this);\r\n        this.mouseEnter = this.mouseEnter.bind(this);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div id = \"buttons\">\r\n            <button onClick={this.addColumn}> Add Column </button>\r\n            <button onClick={this.removeColumn}> Remove Column </button>\r\n            <button onClick={this.addRow}> Add Row </button>\r\n            <button onClick={this.removeRow}> Remove Row </button>\r\n            <button onClick={this.fillAll}> Fill All </button>\r\n            <button onClick={this.fillUncolored}> Fill Uncolored </button>\r\n            <button onClick={this.clearAll}> Clear All </button>\r\n            <select onChange = {this.colorOptions}>\r\n                <option value = \"white\"> White </option>\r\n                <option value = \"red\"> Red </option>\r\n                <option value = \"green\"> Green </option>\r\n                <option value = \"blue\"> Blue </option>\r\n            </select>\r\n            </div>\r\n            <table className=\"table\"> {this.createTable()} </table>\r\n            </>\r\n        );\r\n    }\r\n\r\n    createTable(){\r\n        let table = []\r\n        for(let i = 0; i < this.state.rows; i++){\r\n            let row = []\r\n            for(let j = 0; j < this.state.cellCount; j++)\r\n                row.push(<TableCell \r\n                    mouseUp = {this.mouseUp}\r\n                    mouseDown = {this.mouseDown}\r\n                    mouseEnter = {this.mouseEnter}\r\n                    onClick = {this.color}\r\n                />)\r\n            table.push(<TableRow cells={row}/>)\r\n        }\r\n        return table;\r\n    }\r\n    //Creates Handlers to adjust the state based on button clicks and selection menu\r\n\r\n    //Adds a Column to the table\r\n    addColumn(){\r\n        this.setState({ cellCount: this.state.cellCount+1 })}\r\n    \r\n    //Removes the added Column\r\n    removeColumn(){if(this.state.cellCount > 1){\r\n         this.setState({ cellCount: this.state.cellCount-1 })}}\r\n    \r\n    //Adds a row to the table\r\n    addRow(){ this.setState({ rows: this.state.rows+1 })}\r\n    \r\n    //Removes the row that has been added to the table\r\n    removeRow(){if(this.state.rows > 1){\r\n         this.setState({ rows: this.state.rows-1 })}}\r\n    \r\n    //This handles the color that has been selected from the drop down menu, and assigns the value to the state\r\n    colorOptions(event){ event.preventDefault();\r\n        this.setState({color : event.target.value})}\r\n\r\n    //takes the value of color that is in the state, and assigns it to the background color of the cell\r\n    color(event){ event.preventDefault();\r\n        event.target.style.backgroundColor = this.state.color}\r\n    \r\n    //If the mouse is not being pressed while over a cell it will not return the colored boolean property back to false\r\n    mouseUp(event){event.preventDefault();\r\n        this.setState({colored : false})}\r\n\r\n    //If the mouse is being pressed while in a cell, it will assign true to the colored boolean property\r\n    mouseDown(event){event.preventDefault();\r\n        this.setState({colored : true})}\r\n    //This works with the mouseDown method to change the color of the cells, combining the motion of the mouse with it being clicked to change the cell's color\r\n    mouseEnter(event){event.preventDefault();\r\n        if(this.state.colored == true){event.target.style.backgroundColor = this.state.color}}\r\n    \r\n    //Fills all the cells with the selected color\r\n    fillAll(event){\r\n        event.preventDefault();\r\n        let cells = document.getElementsByTagName(\"td\");\r\n        for(var i = 0; i < cells.length; i++){\r\n            cells[i].style.backgroundColor = this.state.color;\r\n        }\r\n    }\r\n\r\n    //Fills all the cells that has not been assigned a color\r\n    fillUncolored(event){\r\n        event.preventDefault();\r\n        let cells = document.getElementsByTagName(\"td\");\r\n        for(var i = 0; i < cells.length; i++){\r\n            if(cells[i].style.backgroundColor == \"\"){\r\n            cells[i].style.backgroundColor = this.state.color;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Clears all color from every cell\r\n    clearAll(event){\r\n        event.preventDefault();\r\n        let cells = document.getElementsByTagName(\"td\");\r\n        for(var i = 0; i < cells.length; i++){\r\n            cells[i].style.backgroundColor = \"\";\r\n        }\r\n    }\r\n}","import Table from \"./components/Table\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Table />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}